-- User Profiles
CREATE TABLE public.users (
  id uuid NOT NULL PRIMARY KEY,
  github_id int4,
  name text,
  email text,
  access_token text
);
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow logged-in read access" on public.users FOR SELECT USING ( auth.role() = 'authenticated' );
CREATE POLICY "Allow individual insert access" on public.users FOR INSERT WITH CHECK ( auth.uid() = id );
CREATE POLICY "Allow individual update access" on public.users FOR UPDATE USING ( auth.uid() = id );

-- Github organizations
CREATE TABLE public.organizations (
  id int NOT NULL PRIMARY KEY,
  name text,
  access_token text,
  show_private_repos boolean DEFAULT false,
  track_issues boolean DEFAULT false
);
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow logged-in read access" on public.organizations FOR SELECT USING ( auth.role() = 'authenticated' );
CREATE POLICY "Allow logged-in insert access" on public.organizations FOR INSERT WITH CHECK ( auth.role() = 'authenticated' );
CREATE POLICY "Allow logged-in update access" on public.organizations FOR UPDATE USING ( auth.role() = 'authenticated' );

-- Issue counts
CREATE TABLE public.issues (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  organization text,
  repository text,
  open_issues int4,
  closed_issues int4,
  inserted_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Star histories
CREATE TABLE public.stars (
  organization text NOT NULL,
  repository text NOT NULL,
  star_history jsonb,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  cursor text,
  is_complete boolean DEFAULT false,
  total_star_count int4
);

-- Disable realtime, not needed
BEGIN;
DROP PUBLICATION supabase_realtime;
CREATE PUBLICATION supabase_realtime;
COMMIT;